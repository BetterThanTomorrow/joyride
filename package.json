{
  "name": "joyride",
  "displayName": "Joyride",
  "description": "Making VS Code hackable. (A bit like Emacs with ELisp.) Powered by SCI, the Small Clojure Interpreter.",
  "icon": "assets/joyride.png",
  "version": "0.0.54",
  "publisher": "betterthantomorrow",
  "author": {
    "name": "Better Than Tomorrow",
    "email": "pez@pezius.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/BetterThanTomorrow/joyride.git"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/BetterThanTomorrow/joyride/issues"
  },
  "engines": {
    "vscode": ">=1.96.2"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "Emacs",
    "vscode",
    "script",
    "clojure",
    "sci",
    "hackable",
    "scripting",
    "REPL",
    "automation"
  ],
  "galleryBanner": {
    "color": "#344D81",
    "theme": "dark"
  },
  "badges": [
    {
      "url": "https://img.shields.io/badge/clojurians-joyride-blue.svg?logo=slack",
      "href": "https://clojurians.slack.com/messages/joyride/",
      "description": "Let's talk in the #joyride channel on the Clojurians Slack"
    }
  ],
  "activationEvents": [
    "*",
    "workspaceContains:**/.joyride",
    "onStartupFinished"
  ],
  "main": "./out/joyride.js",
  "contributes": {
    "configuration": [
      {
        "title": "Joyride",
        "properties": {
          "joyride.nreplHostAddress": {
            "type": "string",
            "default": "127.0.0.1",
            "markdownDescription": "The host address to use for the nREPL server."
          },
          "joyride.lm.enableReplTool": {
            "type": "boolean",
            "default": true,
            "description": "Enable Copilot Joyride REPL access"
          }
        }
      }
    ],
    "commands": [
      {
        "command": "joyride.runCode",
        "title": "Run Clojure Code...",
        "category": "Joyride"
      },
      {
        "command": "joyride.evaluateSelection",
        "title": "Evaluate Selection",
        "category": "Joyride"
      },
      {
        "command": "joyride.runUserScript",
        "title": "Run User Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.runWorkspaceScript",
        "title": "Run Workspace Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.openUserScript",
        "title": "Open User Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.openWorkspaceScript",
        "title": "Open Workspace Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.createUserScript",
        "title": "Create User Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.createUserSourceFile",
        "title": "Create User Source File...",
        "category": "Joyride"
      },
      {
        "command": "joyride.openUserDirectory",
        "title": "Open User Joyride Directory in New Window",
        "category": "Joyride"
      },
      {
        "command": "joyride.startNReplServer",
        "title": "Start nREPL Server",
        "category": "Joyride",
        "enablement": "!joyride.isNReplServerRunning"
      },
      {
        "command": "joyride.stopNReplServer",
        "title": "Stop nREPL Server",
        "category": "Joyride",
        "enablement": "joyride.isNReplServerRunning"
      },
      {
        "command": "joyride.enableNReplMessageLogging",
        "title": "Enable nREPL message logging",
        "category": "Joyride"
      },
      {
        "command": "joyride.disableNReplMessageLogging",
        "title": "Disable nREPL message logging",
        "category": "Joyride"
      },
      {
        "command": "joyride.createUserActivateScript",
        "title": "Create User Activate Script",
        "category": "Joyride",
        "enablement": "!joyride.userActivateScriptExists"
      },
      {
        "command": "joyride.createUserHelloScript",
        "title": "Create Hello Joyride User Script",
        "category": "Joyride",
        "enablement": "!joyride.userHelloScriptExists"
      },
      {
        "command": "joyride.createWorkspaceActivateScript",
        "title": "Create Workspace Activate Script",
        "category": "Joyride",
        "enablement": "!joyride.workspaceActivateScriptExists"
      },
      {
        "command": "joyride.createWorkspaceHelloScript",
        "title": "Create Hello Joyride Workspace Script",
        "category": "Joyride",
        "enablement": "!joyride.workspaceHelloScriptExists"
      }
    ],
    "keybindings": [
      {
        "command": "joyride.runCode",
        "key": "ctrl+alt+j space"
      },
      {
        "command": "joyride.evaluateSelection",
        "key": "ctrl+alt+j enter"
      },
      {
        "command": "joyride.runUserScript",
        "key": "ctrl+alt+j u"
      },
      {
        "command": "joyride.runWorkspaceScript",
        "key": "ctrl+alt+j w"
      }
    ],
    "languageModelTools": [
      {
        "name": "joyride_evaluate_code",
        "when": "config.joyride.lm.enableReplTool",
        "displayName": "Run Joyride Code",
        "modelDescription": "Execute ClojureScript code in VS Code's Extension API environment via Joyride. Thus, you can modify editor behavior, manipulate files, invoke VS Code APIs, and create dynamic workflows. Runs synchronously by default - if you evaluate async code and need the unwrapped result, use the `awaitResult` parameter.",
        "userDescription": "Execute code with full VS Code API access (inspecting and/or modifying your VS Code environment)",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "joyride-eval",
        "icon": "$(play)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Joyride code to evaluate. Joyride is scripted with SCI ClojureScript within the VS Code Extension Host environment. Use the `joyride-basics-for-agents` to familiarize yourself with Joyride. Patterns examples: `(require '[\"vscode\" :as vscode])`, `(vscode/window.showInformationMessage \"Hello!\")`, `(vscode/workspace.getConfiguration \"setting\")`. **Classpath**:  When resolving namespaces, Joyride searches for source files in: 1. `<workspace-root>/.joyride/src` 2. `<workspace-root>/.joyride/scripts` 3. `<user-home>/.config/joyride/src` 4. `<user-home>/.config/joyride/scripts`"
            },
            "namespace": {
              "type": "string",
              "description": "Target namespace for code evaluation. Defaults to 'user'. When showing the evaluated code to the user, include the namespace first in the codeblock like so `(in-ns 'namespace)`."
            },
            "awaitResult": {
              "type": "boolean",
              "description": "Whether to wait for async operations to finish. Defaults to `false`. Use `true` when you need the result (user input, file contents, API responses, etcetera). Use  `false` to avoid blocking on promises that may never resolve."
            }
          },
          "required": [
            "code"
          ]
        }
      },
      {
        "name": "joyride_basics_for_agents",
        "when": "config.joyride.lm.enableReplTool",
        "displayName": "Get Joyride for Agents Guide",
        "modelDescription": "Retrieve the latest Joyride guide for LLM agents, providing context on how to use Joyride's evaluation capabilities effectively.",
        "userDescription": "Gives the agent documentation about Joyride",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "joyride-basics-for-agents",
        "icon": "$(book)",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "required": []
        }
      }
    ]
  },
  "scripts": {
    "clean": "rimraf .cpcache .shadow-cljs/ out/",
    "watch": "clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,\"1.3.1\"},cider/cider-nrepl {:mvn/version,\"0.55.4\"}}}' -M:dev -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware shadow.cljs.devtools.server.nrepl/middleware]\"",
    "prewatch": "npm run clean",
    "compile": "npx shadow-cljs compile :extension",
    "release": "npx shadow-cljs release :extension",
    "package": "npx vsce package --allow-star-activation",
    "vscode:prepublish": "npm run clean && npm run release",
    "preintegration-test": "cd ./vscode-test-runner/workspace-1 && npm i",
    "integration-test": "node ./vscode-test-runner/launch.js"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.30",
    "fdir": "^5.2.0",
    "picomatch": "^2.3.1"
  },
  "devDependencies": {
    "@vscode/test-electron": "^2.2.3",
    "axios": "^1.1.2",
    "moment": "^2.29.4",
    "rimraf": "^3.0.2",
    "shadow-cljs": "^2.18.0",
    "vsce": "^2.15.0"
  }
}