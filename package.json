{
  "name": "joyride",
  "displayName": "Joyride",
  "description": "Making VS Code hackable. (A bit like Emacs with ELisp.) Powered by SCI, the Small Clojure Interpreter.",
  "icon": "assets/joyride.png",
  "version": "0.0.49",
  "publisher": "betterthantomorrow",
  "author": {
    "name": "Better Than Tomorrow",
    "email": "pez@pezius.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/BetterThanTomorrow/joyride.git"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/BetterThanTomorrow/joyride/issues"
  },
  "engines": {
    "vscode": ">=1.96.2"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "Emacs",
    "vscode",
    "script",
    "clojure",
    "sci",
    "hackable",
    "scripting",
    "REPL",
    "automation"
  ],
  "galleryBanner": {
    "color": "#344D81",
    "theme": "dark"
  },
  "badges": [
    {
      "url": "https://img.shields.io/badge/clojurians-joyride-blue.svg?logo=slack",
      "href": "https://clojurians.slack.com/messages/joyride/",
      "description": "Let's talk in the #joyride channel on the Clojurians Slack"
    }
  ],
  "activationEvents": [
    "*",
    "workspaceContains:**/.joyride",
    "onStartupFinished"
  ],
  "main": "./out/joyride.js",
  "contributes": {
    "configuration": [
      {
        "title": "Joyride",
        "properties": {
          "joyride.nreplHostAddress": {
            "type": "string",
            "default": "127.0.0.1",
            "markdownDescription": "The host address to use for the nREPL server."
          },
          "joyride.lm.enableReplTool": {
            "type": "boolean",
            "default": true,
            "description": "Enable Copilot Joyride REPL access"
          }
        }
      }
    ],
    "commands": [
      {
        "command": "joyride.runCode",
        "title": "Run Clojure Code...",
        "category": "Joyride"
      },
      {
        "command": "joyride.evaluateSelection",
        "title": "Evaluate Selection",
        "category": "Joyride"
      },
      {
        "command": "joyride.runUserScript",
        "title": "Run User Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.runWorkspaceScript",
        "title": "Run Workspace Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.openUserScript",
        "title": "Open User Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.openWorkspaceScript",
        "title": "Open Workspace Script...",
        "category": "Joyride"
      },
      {
        "command": "joyride.startNReplServer",
        "title": "Start nREPL Server",
        "category": "Joyride",
        "enablement": "!joyride.isNReplServerRunning"
      },
      {
        "command": "joyride.stopNReplServer",
        "title": "Stop nREPL Server",
        "category": "Joyride",
        "enablement": "joyride.isNReplServerRunning"
      },
      {
        "command": "joyride.enableNReplMessageLogging",
        "title": "Enable nREPL message logging",
        "category": "Joyride"
      },
      {
        "command": "joyride.disableNReplMessageLogging",
        "title": "Disable nREPL message logging",
        "category": "Joyride"
      }
    ],
    "keybindings": [
      {
        "command": "joyride.runCode",
        "key": "ctrl+alt+j space"
      },
      {
        "command": "joyride.evaluateSelection",
        "key": "ctrl+alt+j enter"
      },
      {
        "command": "joyride.runUserScript",
        "key": "ctrl+alt+j u"
      },
      {
        "command": "joyride.runWorkspaceScript",
        "key": "ctrl+alt+j w"
      }
    ],
    "languageModelTools": [
      {
        "name": "joyride_evaluate_code",
        "when": "config.joyride.lm.enableReplTool",
        "displayName": "Run Joyride Code",
        "modelDescription": "Execute ClojureScript code in VS Code's Extension API environment, through Joyride. This tool can modify editor behavior, manipulate files, invoke VS Code APIs, and create dynamic workflows. Use when the user requests VS Code automation, editor customization, or Joyride usage. The code runs with full VS Code API access.\n\n#fetch https://github.com/BetterThanTomorrow/joyride/blob/master/doc/api.md",
        "userDescription": "Execute code with full VS Code API access (inspecting or modifying your VS Code environment)",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "joyride-eval",
        "icon": "$(play)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Joyride code to execute. Joyride code is written in ClojureScript, a Joyride adapted SCI ClojureScript, even. \n\nJoyride has a fixed ”classpath” (the paths where it looks for roots to your Joyride code source files). It searches these directories in this order:\n1. `<workspace-root>/.joyride/src`\n1. `<workspace-root>/.joyride/scripts`\n1. `<user-home>/.config/joyride/src`\n1. `<user-home>/.config/joyride/scripts`"
            },
            "namespace": {
              "type": "string",
              "description": "Target namespace for code execution. Defaults to 'user'."
            },
            "waitForFinalPromise": {
              "type": "boolean",
              "description": "Wether to wait for promises if the evaluation results in a promise. Defaults to `false`. When you specifically want interact with the user, or otherwise need the resolved promise value."
            }
          },
          "required": [
            "code"
          ]
        }
      }
    ]
  },
  "scripts": {
    "clean": "rimraf .cpcache .shadow-cljs/ out/",
    "watch": "clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,\"1.3.1\"},cider/cider-nrepl {:mvn/version,\"0.55.4\"}}}' -M:dev -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware shadow.cljs.devtools.server.nrepl/middleware]\"",
    "prewatch": "npm run clean",
    "compile": "npx shadow-cljs compile :extension",
    "release": "npx shadow-cljs release :extension",
    "package": "npx vsce package --allow-star-activation",
    "vscode:prepublish": "npm run clean && npm run release",
    "preintegration-test": "cd ./vscode-test-runner/workspace-1 && npm i",
    "integration-test": "node ./vscode-test-runner/launch.js"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.30",
    "fdir": "^5.2.0",
    "picomatch": "^2.3.1"
  },
  "devDependencies": {
    "@vscode/test-electron": "^2.2.3",
    "axios": "^1.1.2",
    "moment": "^2.29.4",
    "rimraf": "^3.0.2",
    "shadow-cljs": "^2.18.0",
    "vsce": "^2.15.0"
  }
}
